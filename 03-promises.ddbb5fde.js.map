{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,uBACtCC,EAAcF,SAASC,cAAc,sBACrCE,EAAgBH,SAASC,cAAc,oBA2B7C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAnCWN,SAASC,cAAc,UAE/Ba,iBAAiB,SAEjC,SAAoBC,GAClBA,EAAIC,iBACJ,MAAMC,GAAclB,EAAamB,MAC3BC,GAAQjB,EAAYgB,MACpBE,GAAUjB,EAAce,MAC9BnB,EAAamB,MAAQ,GACrBhB,EAAYgB,MAAQ,GACpBf,EAAce,MAAQ,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAGlCjB,EAFeiB,EAAI,EACPJ,EAAaI,EAAIF,GAE1BG,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA1B,GAAS2B,OAAOC,QAAQ,qBAAqBpB,QAAeC,OAC5DoB,QAAQC,IAAI,qBAAqBtB,QAAeC,MAAU,IAE3DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA1B,GAAS2B,OAAOK,QAAQ,oBAAoBxB,QAAeC,OAC3DoB,QAAQC,IAAI,oBAAoBtB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst inputDelayEl = document.querySelector(\"input[name='delay']\");\nconst inputStepEl = document.querySelector(\"input[name='step']\");\nconst inputAmountEl = document.querySelector(\" [name='amount']\");\nconst btnCreatePromEl = document.querySelector('button');\n\nbtnCreatePromEl.addEventListener('click', onClickBtn);\n\nfunction onClickBtn(evt) {\n  evt.preventDefault();\n  const delayFirst = +inputDelayEl.value;\n  const step = +inputStepEl.value;\n  const amount = +inputAmountEl.value;\n  inputDelayEl.value = '';\n  inputStepEl.value = '';\n  inputAmountEl.value = '';\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    let delay = delayFirst + i * step;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        console.log(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$inputDelayEl","document","querySelector","$47d4ff9957288465$var$inputStepEl","$47d4ff9957288465$var$inputAmountEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delayFirst","value","step","amount","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.ddbb5fde.js.map"}